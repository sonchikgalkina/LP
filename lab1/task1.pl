% Первая часть задания - предикаты работы со списками
% Реализация стндартных предикатов обработки списков

% Длина списка
% (список, длина)

my_length([], 0).
my_length([X|Y], T) :-
	my_length(Y, Q),
	T is Q + 1.
 
% Принадлежность элемента списку
% (элемент, список)

my_member(X, [X|Y]).
my_member(X, [Y|Z]) :-
	my_member(X, Z).

% Конкатенация списков 
% (список1, список2, список1+ список2)

my_append([], L, L).
my_append([X | R1], L2, [X | R3]) :-
	my_append(R1, L2, R3).

% Удаление элемента из списка
% (элемент, список, список без элемента)

my_remove(X, [X|R], R).
my_remove(X, [Y|R], [Y|T]) :-
	my_remove(X, R, T).
 
% Перестановки элементов в списке
% (список, перестановка)

my_permute([], []).
my_permute(L1, [X | R2]) :-
	my_remove(X, L1, L2),
	my_permute(L2, R2).

% Посписки списков
% (подсписок, список)

my_sublist(S, L) :-
	my_append(L1, L2, L),
	my_append(S, L3, L2).

% Вариант №5. Удаление N первых элементов.
% Первым параметром задаем исходный список, вторым параметром - количество элементов, третьим параметром - список после удаления

% Без использования стандартных предикатов
delete(X, 0, X).
delete([X|Y], N, Z) :-
	delete(Y, Q, Z),
	N is Q + 1.

% С использованием стандартных предикатов
delete2(X, N, Y) :-
	my_append(A, Y, X),
	my_length(A, N).

% Вариант №10. Лексикографическое сравнение двух списков.
% Первым параметром задаем первый список, вторым параметром - второй список

% Без использования стандартных предикатов
lexic_compare([X|Tail], [Y|Tail]) :- X =:= Y, lexic_compare(Tail, Tail).
lexic_compare([X], [Y]) :- X =:= Y.

% С использованием стандартных предикатов
lexic_compare1([], []).
lexic_compare1([X|Tail], Y) :- my_remove(Y, X, Y1), lexic_compare1(Tail, Y1).

% Лексиграфическое сравнение двух списков при удалении N первых элементов.
compare(L1, L2, K):- delete(K, L1, S1), delete(K, L2, S2), lexic_compare(S1, S2).
